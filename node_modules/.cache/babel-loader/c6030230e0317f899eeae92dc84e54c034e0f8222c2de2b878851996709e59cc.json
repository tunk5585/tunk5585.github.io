{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\5585\\\\Desktop\\\\\\u0442\\u0435\\u0441\\u04422_\\u0432\\u0435\\u0431\\\\portfolio\\\\src\\\\components\\\\InteractiveBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  user-select: none;\n  pointer-events: none;\n  z-index: 1;\n`;\n_c = BackgroundContainer;\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(50px, 1fr));\n  width: 100%;\n  height: 100%;\n`;\n_c2 = Grid;\nconst Cell = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: monospace;\n  font-size: ${props => props.$size || '14px'};\n  color: var(--text-primary);\n  opacity: 0.05;\n  transition: all 0.3s ease;\n  position: relative;\n  \n  &.highlight {\n    opacity: 0.2;\n  }\n  \n  &.active {\n    opacity: 0.6;\n  }\n  \n  &.happy {\n    color: #4CAF50;\n  }\n  \n  &.curious {\n    color: #2196F3;\n  }\n  \n  &.confused {\n    color: #FFC107;\n  }\n  \n  &.disturbed {\n    color: #F44336;\n  }\n`;\n_c3 = Cell;\nconst MoodIndicator = styled.span`\n  position: absolute;\n  font-size: 8px;\n  top: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.8;\n`;\n\n// Наборы символов по категориям\n_c4 = MoodIndicator;\nconst numericSymbols = '0123456789';\nconst mathSymbols = '+-*/=<>%';\nconst specialSymbols = '#$&*@[]^_{}~';\nconst moodEmojis = ['☺', '?', '!', '♥', '★', '♦', '▲', '◆'];\n\n// Эмоциональные состояния\nconst moods = ['happy', 'curious', 'confused', 'disturbed', ''];\nconst InteractiveBackground = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const containerRef = useRef(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n\n  // Выбор случайного символа на основе позиции - мемоизируем функцию\n  const getRandomSymbol = useCallback((x, y) => {\n    // Используем координаты для создания псевдо-случайного выбора типа символа\n    const seed = (x * 31 + y * 17) % 100;\n    if (seed < 60) {\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\n    } else if (seed < 85) {\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\n    } else {\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\n    }\n  }, []);\n\n  // Функция для создания сетки символов\n  const createGrid = useCallback(() => {\n    if (!containerRef.current) return;\n    const containerWidth = containerRef.current.offsetWidth;\n    const containerHeight = containerRef.current.offsetHeight;\n\n    // Увеличиваем размер ячейки до 50px для снижения числа элементов и улучшения производительности\n    const columns = Math.floor(containerWidth / 50);\n    const rows = Math.floor(containerHeight / 50);\n    setDimensions({\n      width: containerWidth,\n      height: containerHeight\n    });\n    const newGrid = [];\n    for (let y = 0; y < rows; y++) {\n      const row = [];\n      for (let x = 0; x < columns; x++) {\n        // Генерируем случайный символ на основе позиции\n        const char = getRandomSymbol(x, y);\n\n        // Для разнообразия делаем символы разного размера\n        const size = Math.random() < 0.1 ? `${12 + Math.floor(Math.random() * 8)}px` : '14px';\n        row.push({\n          id: `${x}-${y}`,\n          x,\n          y,\n          char,\n          size,\n          // Случайное начальное состояние и настроение\n          state: Math.random() < 0.03 ? 'highlight' : 'normal',\n          mood: Math.random() < 0.01 ? moods[Math.floor(Math.random() * moods.length)] : '',\n          moodEmoji: moodEmojis[Math.floor(Math.random() * moodEmojis.length)]\n        });\n      }\n      newGrid.push(row);\n    }\n    setGrid(newGrid);\n  }, [getRandomSymbol]);\n\n  // Обновляем ячейки в зависимости от позиции мыши при помощи requestAnimationFrame\n  // Это даст более плавную анимацию\n  const updateCellsBasedOnMouse = useCallback(() => {\n    if (!containerRef.current) return;\n    const currentTime = Date.now();\n    // Обновляем не чаще, чем раз в 100 мс для снижения нагрузки\n    if (currentTime - lastUpdateTime.current < 100) {\n      animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n      return;\n    }\n    lastUpdateTime.current = currentTime;\n    setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n      const cellX = cell.x * 50 + 25;\n      const cellY = cell.y * 50 + 25;\n      const distance = Math.sqrt(Math.pow(cellX - mousePosition.x, 2) + Math.pow(cellY - mousePosition.y, 2));\n      let newState = 'normal';\n      let newMood = cell.mood;\n      if (distance < 100) {\n        newState = 'active';\n        // При активации ячейки повышаем вероятность появления настроения\n        if (Math.random() < 0.3 && !cell.mood) {\n          newMood = moods[Math.floor(Math.random() * (moods.length - 1))]; // Исключаем пустое настроение\n        }\n      } else if (distance < 200) {\n        newState = 'highlight';\n      }\n\n      // Возвращаем новый объект только если состояние изменилось\n      if (cell.state !== newState || cell.mood !== newMood) {\n        return {\n          ...cell,\n          state: newState,\n          mood: newMood\n        };\n      }\n      return cell;\n    })));\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n  }, [mousePosition]);\n\n  // Инициализация сетки\n  useEffect(() => {\n    createGrid();\n    const handleResize = () => {\n      // Используем debounce для обработки события resize\n      clearTimeout(window.resizeTimer);\n      window.resizeTimer = setTimeout(createGrid, 250);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Периодически обновляем случайные символы и их состояния\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n        // Небольшая вероятность изменения символа\n        const changeChar = Math.random() < 0.01;\n        // Ещё меньшая вероятность смены настроения\n        const changeMood = Math.random() < 0.003;\n\n        // Возвращаем новый объект только при реальных изменениях\n        if (changeChar || changeMood) {\n          return {\n            ...cell,\n            char: changeChar ? getRandomSymbol(cell.x, cell.y) : cell.char,\n            mood: changeMood ? moods[Math.floor(Math.random() * moods.length)] : cell.mood\n          };\n        }\n        return cell;\n      })));\n    }, 3000);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      clearInterval(interval);\n    };\n  }, [createGrid, getRandomSymbol]);\n\n  // Обработка движения мыши\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      setMousePosition({\n        x,\n        y\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Запускаем анимацию обновления ячеек\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [updateCellsBasedOnMouse]);\n\n  // Мемоизируем ячейки сетки, чтобы улучшить производительность рендеринга\n  const renderedGrid = useMemo(() => grid.flat().map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n    className: `${cell.state} ${cell.mood}`,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: cell.state === 'active' ? 0.6 : cell.state === 'highlight' ? 0.2 : 0.05\n    },\n    transition: {\n      duration: 0.3\n    },\n    $size: cell.size,\n    children: [cell.char, cell.mood && cell.state === 'active' && /*#__PURE__*/_jsxDEV(MoodIndicator, {\n      className: cell.mood,\n      children: cell.moodEmoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }, this)]\n  }, cell.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 7\n  }, this)), [grid]);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: renderedGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveBackground, \"0pPMZ8qz+YbJ4Q3y/qdlyG44/ak=\");\n_c5 = InteractiveBackground;\nexport default InteractiveBackground;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"Cell\");\n$RefreshReg$(_c4, \"MoodIndicator\");\n$RefreshReg$(_c5, \"InteractiveBackground\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useCallback","styled","motion","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","Grid","_c2","Cell","props","$size","_c3","MoodIndicator","span","_c4","numericSymbols","mathSymbols","specialSymbols","moodEmojis","moods","InteractiveBackground","_s","grid","setGrid","mousePosition","setMousePosition","x","y","dimensions","setDimensions","width","height","containerRef","animationFrameId","lastUpdateTime","getRandomSymbol","seed","charAt","Math","floor","random","length","createGrid","current","containerWidth","offsetWidth","containerHeight","offsetHeight","columns","rows","newGrid","row","char","size","push","id","state","mood","moodEmoji","updateCellsBasedOnMouse","currentTime","Date","now","requestAnimationFrame","prevGrid","map","cell","cellX","cellY","distance","sqrt","pow","newState","newMood","handleResize","clearTimeout","window","resizeTimer","setTimeout","addEventListener","interval","setInterval","changeChar","changeMood","removeEventListener","clearInterval","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","cancelAnimationFrame","renderedGrid","flat","className","initial","opacity","animate","transition","duration","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c5","$RefreshReg$"],"sources":["C:/Users/5585/Desktop/тест2_веб/portfolio/src/components/InteractiveBackground.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst BackgroundContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  user-select: none;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\r\n  grid-template-rows: repeat(auto-fill, minmax(50px, 1fr));\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cell = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-family: monospace;\r\n  font-size: ${props => props.$size || '14px'};\r\n  color: var(--text-primary);\r\n  opacity: 0.05;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  \r\n  &.highlight {\r\n    opacity: 0.2;\r\n  }\r\n  \r\n  &.active {\r\n    opacity: 0.6;\r\n  }\r\n  \r\n  &.happy {\r\n    color: #4CAF50;\r\n  }\r\n  \r\n  &.curious {\r\n    color: #2196F3;\r\n  }\r\n  \r\n  &.confused {\r\n    color: #FFC107;\r\n  }\r\n  \r\n  &.disturbed {\r\n    color: #F44336;\r\n  }\r\n`;\r\n\r\nconst MoodIndicator = styled.span`\r\n  position: absolute;\r\n  font-size: 8px;\r\n  top: -10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  opacity: 0.8;\r\n`;\r\n\r\n// Наборы символов по категориям\r\nconst numericSymbols = '0123456789';\r\nconst mathSymbols = '+-*/=<>%';\r\nconst specialSymbols = '#$&*@[]^_{}~';\r\nconst moodEmojis = ['☺', '?', '!', '♥', '★', '♦', '▲', '◆'];\r\n\r\n// Эмоциональные состояния\r\nconst moods = ['happy', 'curious', 'confused', 'disturbed', ''];\r\n\r\nconst InteractiveBackground = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  const containerRef = useRef(null);\r\n  const animationFrameId = useRef(null);\r\n  const lastUpdateTime = useRef(0);\r\n  \r\n  // Выбор случайного символа на основе позиции - мемоизируем функцию\r\n  const getRandomSymbol = useCallback((x, y) => {\r\n    // Используем координаты для создания псевдо-случайного выбора типа символа\r\n    const seed = (x * 31 + y * 17) % 100;\r\n    \r\n    if (seed < 60) {\r\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\r\n    } else if (seed < 85) {\r\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\r\n    } else {\r\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\r\n    }\r\n  }, []);\r\n  \r\n  // Функция для создания сетки символов\r\n  const createGrid = useCallback(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    const containerWidth = containerRef.current.offsetWidth;\r\n    const containerHeight = containerRef.current.offsetHeight;\r\n    \r\n    // Увеличиваем размер ячейки до 50px для снижения числа элементов и улучшения производительности\r\n    const columns = Math.floor(containerWidth / 50);\r\n    const rows = Math.floor(containerHeight / 50);\r\n    \r\n    setDimensions({ width: containerWidth, height: containerHeight });\r\n    \r\n    const newGrid = [];\r\n    for (let y = 0; y < rows; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < columns; x++) {\r\n        // Генерируем случайный символ на основе позиции\r\n        const char = getRandomSymbol(x, y);\r\n        \r\n        // Для разнообразия делаем символы разного размера\r\n        const size = Math.random() < 0.1 ? `${12 + Math.floor(Math.random() * 8)}px` : '14px';\r\n        \r\n        row.push({\r\n          id: `${x}-${y}`,\r\n          x,\r\n          y,\r\n          char,\r\n          size,\r\n          // Случайное начальное состояние и настроение\r\n          state: Math.random() < 0.03 ? 'highlight' : 'normal',\r\n          mood: Math.random() < 0.01 ? moods[Math.floor(Math.random() * moods.length)] : '',\r\n          moodEmoji: moodEmojis[Math.floor(Math.random() * moodEmojis.length)]\r\n        });\r\n      }\r\n      newGrid.push(row);\r\n    }\r\n    setGrid(newGrid);\r\n  }, [getRandomSymbol]);\r\n  \r\n  // Обновляем ячейки в зависимости от позиции мыши при помощи requestAnimationFrame\r\n  // Это даст более плавную анимацию\r\n  const updateCellsBasedOnMouse = useCallback(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    const currentTime = Date.now();\r\n    // Обновляем не чаще, чем раз в 100 мс для снижения нагрузки\r\n    if (currentTime - lastUpdateTime.current < 100) {\r\n      animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n      return;\r\n    }\r\n    \r\n    lastUpdateTime.current = currentTime;\r\n    \r\n    setGrid(prevGrid => \r\n      prevGrid.map(row => \r\n        row.map(cell => {\r\n          const cellX = cell.x * 50 + 25;\r\n          const cellY = cell.y * 50 + 25;\r\n          \r\n          const distance = Math.sqrt(\r\n            Math.pow(cellX - mousePosition.x, 2) + \r\n            Math.pow(cellY - mousePosition.y, 2)\r\n          );\r\n          \r\n          let newState = 'normal';\r\n          let newMood = cell.mood;\r\n          \r\n          if (distance < 100) {\r\n            newState = 'active';\r\n            // При активации ячейки повышаем вероятность появления настроения\r\n            if (Math.random() < 0.3 && !cell.mood) {\r\n              newMood = moods[Math.floor(Math.random() * (moods.length - 1))]; // Исключаем пустое настроение\r\n            }\r\n          } else if (distance < 200) {\r\n            newState = 'highlight';\r\n          }\r\n          \r\n          // Возвращаем новый объект только если состояние изменилось\r\n          if (cell.state !== newState || cell.mood !== newMood) {\r\n            return {\r\n              ...cell,\r\n              state: newState,\r\n              mood: newMood\r\n            };\r\n          }\r\n          \r\n          return cell;\r\n        })\r\n      )\r\n    );\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n  }, [mousePosition]);\r\n  \r\n  // Инициализация сетки\r\n  useEffect(() => {\r\n    createGrid();\r\n    \r\n    const handleResize = () => {\r\n      // Используем debounce для обработки события resize\r\n      clearTimeout(window.resizeTimer);\r\n      window.resizeTimer = setTimeout(createGrid, 250);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Периодически обновляем случайные символы и их состояния\r\n    const interval = setInterval(() => {\r\n      setGrid(prevGrid => \r\n        prevGrid.map(row => \r\n          row.map(cell => {\r\n            // Небольшая вероятность изменения символа\r\n            const changeChar = Math.random() < 0.01;\r\n            // Ещё меньшая вероятность смены настроения\r\n            const changeMood = Math.random() < 0.003;\r\n            \r\n            // Возвращаем новый объект только при реальных изменениях\r\n            if (changeChar || changeMood) {\r\n              return {\r\n                ...cell,\r\n                char: changeChar ? getRandomSymbol(cell.x, cell.y) : cell.char,\r\n                mood: changeMood ? moods[Math.floor(Math.random() * moods.length)] : cell.mood\r\n              };\r\n            }\r\n            \r\n            return cell;\r\n          })\r\n        )\r\n      );\r\n    }, 3000);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      clearInterval(interval);\r\n    };\r\n  }, [createGrid, getRandomSymbol]);\r\n  \r\n  // Обработка движения мыши\r\n  useEffect(() => {\r\n    const handleMouseMove = (e) => {\r\n      if (!containerRef.current) return;\r\n      \r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      \r\n      setMousePosition({ x, y });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    \r\n    // Запускаем анимацию обновления ячеек\r\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, [updateCellsBasedOnMouse]);\r\n  \r\n  // Мемоизируем ячейки сетки, чтобы улучшить производительность рендеринга\r\n  const renderedGrid = useMemo(() => (\r\n    grid.flat().map(cell => (\r\n      <Cell \r\n        key={cell.id}\r\n        className={`${cell.state} ${cell.mood}`}\r\n        initial={{ opacity: 0 }}\r\n        animate={{ \r\n          opacity: cell.state === 'active' ? 0.6 : \r\n                  cell.state === 'highlight' ? 0.2 : 0.05 \r\n        }}\r\n        transition={{ duration: 0.3 }}\r\n        $size={cell.size}\r\n      >\r\n        {cell.char}\r\n        {cell.mood && cell.state === 'active' && (\r\n          <MoodIndicator className={cell.mood}>{cell.moodEmoji}</MoodIndicator>\r\n        )}\r\n      </Cell>\r\n    ))\r\n  ), [grid]);\r\n  \r\n  return (\r\n    <BackgroundContainer ref={containerRef}>\r\n      <Grid>\r\n        {renderedGrid}\r\n      </Grid>\r\n    </BackgroundContainer>\r\n  );\r\n};\r\n\r\nexport default InteractiveBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}