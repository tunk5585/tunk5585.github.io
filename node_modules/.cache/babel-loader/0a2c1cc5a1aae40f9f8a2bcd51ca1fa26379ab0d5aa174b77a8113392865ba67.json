{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\5585\\\\Desktop\\\\\\u0442\\u0435\\u0441\\u04422_\\u0432\\u0435\\u0431\\\\portfolio\\\\src\\\\components\\\\InteractiveBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  user-select: none;\n  pointer-events: none;\n  z-index: 1;\n`;\n_c = BackgroundContainer;\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(40px, 1fr));\n  width: 100%;\n  height: 100%;\n`;\n_c2 = Grid;\nconst Cell = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: monospace;\n  font-size: ${props => props.$size || '14px'};\n  color: var(--text-primary);\n  opacity: 0.05;\n  transition: all 0.3s ease;\n  position: relative;\n  \n  &.highlight {\n    opacity: 0.2;\n  }\n  \n  &.active {\n    opacity: 0.6;\n  }\n  \n  &.happy {\n    color: #4CAF50;\n  }\n  \n  &.curious {\n    color: #2196F3;\n  }\n  \n  &.confused {\n    color: #FFC107;\n  }\n  \n  &.disturbed {\n    color: #F44336;\n  }\n`;\n_c3 = Cell;\nconst MoodIndicator = styled.span`\n  position: absolute;\n  font-size: 8px;\n  top: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0.8;\n`;\n\n// Наборы символов по категориям\n_c4 = MoodIndicator;\nconst numericSymbols = '0123456789';\nconst mathSymbols = '+-*/=<>%';\nconst specialSymbols = '#$&*@[]^_{}~';\nconst moodEmojis = ['☺', '?', '!', '♥', '★', '♦', '▲', '◆'];\n\n// Эмоциональные состояния\nconst moods = ['happy', 'curious', 'confused', 'disturbed', ''];\nconst InteractiveBackground = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const containerRef = useRef(null);\n\n  // Выбор случайного символа на основе позиции\n  const getRandomSymbol = (x, y) => {\n    // Используем координаты для создания псевдо-случайного выбора типа символа\n    const seed = (x * 31 + y * 17) % 100;\n    if (seed < 60) {\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\n    } else if (seed < 85) {\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\n    } else {\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\n    }\n  };\n\n  // Функция для создания сетки символов\n  const createGrid = () => {\n    if (!containerRef.current) return;\n    const containerWidth = containerRef.current.offsetWidth;\n    const containerHeight = containerRef.current.offsetHeight;\n    const columns = Math.floor(containerWidth / 40);\n    const rows = Math.floor(containerHeight / 40);\n    setDimensions({\n      width: containerWidth,\n      height: containerHeight\n    });\n    const newGrid = [];\n    for (let y = 0; y < rows; y++) {\n      const row = [];\n      for (let x = 0; x < columns; x++) {\n        // Генерируем случайный символ на основе позиции\n        const char = getRandomSymbol(x, y);\n\n        // Для разнообразия делаем символы разного размера\n        const size = Math.random() < 0.1 ? `${12 + Math.floor(Math.random() * 8)}px` : '14px';\n        row.push({\n          id: `${x}-${y}`,\n          x,\n          y,\n          char,\n          size,\n          // Случайное начальное состояние и настроение\n          state: Math.random() < 0.03 ? 'highlight' : 'normal',\n          mood: Math.random() < 0.01 ? moods[Math.floor(Math.random() * moods.length)] : '',\n          moodEmoji: moodEmojis[Math.floor(Math.random() * moodEmojis.length)]\n        });\n      }\n      newGrid.push(row);\n    }\n    setGrid(newGrid);\n  };\n\n  // Инициализация сетки\n  useEffect(() => {\n    createGrid();\n    window.addEventListener('resize', createGrid);\n\n    // Периодически обновляем случайные символы и их состояния\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n        // Небольшая вероятность изменения символа\n        const changeChar = Math.random() < 0.02;\n        // Ещё меньшая вероятность смены настроения\n        const changeMood = Math.random() < 0.005;\n        return {\n          ...cell,\n          char: changeChar ? getRandomSymbol(cell.x, cell.y) : cell.char,\n          mood: changeMood ? moods[Math.floor(Math.random() * moods.length)] : cell.mood,\n          state: Math.random() < 0.01 ? cell.state === 'normal' ? 'highlight' : 'normal' : cell.state\n        };\n      })));\n    }, 2000);\n    return () => {\n      window.removeEventListener('resize', createGrid);\n      clearInterval(interval);\n    };\n  }, []);\n\n  // Обработка движения мыши\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      setMousePosition({\n        x,\n        y\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => window.removeEventListener('mousemove', handleMouseMove);\n  }, []);\n\n  // Обновление состояний ячеек на основе положения мыши\n  useEffect(() => {\n    setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n      const cellX = cell.x * 40 + 20;\n      const cellY = cell.y * 40 + 20;\n      const distance = Math.sqrt(Math.pow(cellX - mousePosition.x, 2) + Math.pow(cellY - mousePosition.y, 2));\n      let newState = 'normal';\n      let newMood = cell.mood;\n      if (distance < 80) {\n        newState = 'active';\n        // При активации ячейки повышаем вероятность появления настроения\n        if (Math.random() < 0.3) {\n          newMood = moods[Math.floor(Math.random() * (moods.length - 1))]; // Исключаем пустое настроение\n        }\n      } else if (distance < 150) {\n        newState = 'highlight';\n      }\n      return {\n        ...cell,\n        state: newState,\n        mood: newMood\n      };\n    })));\n  }, [mousePosition]);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: grid.flat().map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n        className: `${cell.state} ${cell.mood}`,\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: cell.state === 'active' ? 0.6 : cell.state === 'highlight' ? 0.2 : 0.05\n        },\n        transition: {\n          duration: 0.3\n        },\n        $size: cell.size,\n        children: [cell.char, cell.mood && cell.state === 'active' && /*#__PURE__*/_jsxDEV(MoodIndicator, {\n          className: cell.mood,\n          children: cell.moodEmoji\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this)]\n      }, cell.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveBackground, \"YVQHjOne/x36dIjYComCgzfUcyM=\");\n_c5 = InteractiveBackground;\nexport default InteractiveBackground;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"Cell\");\n$RefreshReg$(_c4, \"MoodIndicator\");\n$RefreshReg$(_c5, \"InteractiveBackground\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","motion","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","Grid","_c2","Cell","props","$size","_c3","MoodIndicator","span","_c4","numericSymbols","mathSymbols","specialSymbols","moodEmojis","moods","InteractiveBackground","_s","grid","setGrid","mousePosition","setMousePosition","x","y","dimensions","setDimensions","width","height","containerRef","getRandomSymbol","seed","charAt","Math","floor","random","length","createGrid","current","containerWidth","offsetWidth","containerHeight","offsetHeight","columns","rows","newGrid","row","char","size","push","id","state","mood","moodEmoji","window","addEventListener","interval","setInterval","prevGrid","map","cell","changeChar","changeMood","removeEventListener","clearInterval","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","cellX","cellY","distance","sqrt","pow","newState","newMood","ref","children","flat","className","initial","opacity","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","_c5","$RefreshReg$"],"sources":["C:/Users/5585/Desktop/тест2_веб/portfolio/src/components/InteractiveBackground.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst BackgroundContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  user-select: none;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));\r\n  grid-template-rows: repeat(auto-fill, minmax(40px, 1fr));\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cell = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-family: monospace;\r\n  font-size: ${props => props.$size || '14px'};\r\n  color: var(--text-primary);\r\n  opacity: 0.05;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  \r\n  &.highlight {\r\n    opacity: 0.2;\r\n  }\r\n  \r\n  &.active {\r\n    opacity: 0.6;\r\n  }\r\n  \r\n  &.happy {\r\n    color: #4CAF50;\r\n  }\r\n  \r\n  &.curious {\r\n    color: #2196F3;\r\n  }\r\n  \r\n  &.confused {\r\n    color: #FFC107;\r\n  }\r\n  \r\n  &.disturbed {\r\n    color: #F44336;\r\n  }\r\n`;\r\n\r\nconst MoodIndicator = styled.span`\r\n  position: absolute;\r\n  font-size: 8px;\r\n  top: -10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  opacity: 0.8;\r\n`;\r\n\r\n// Наборы символов по категориям\r\nconst numericSymbols = '0123456789';\r\nconst mathSymbols = '+-*/=<>%';\r\nconst specialSymbols = '#$&*@[]^_{}~';\r\nconst moodEmojis = ['☺', '?', '!', '♥', '★', '♦', '▲', '◆'];\r\n\r\n// Эмоциональные состояния\r\nconst moods = ['happy', 'curious', 'confused', 'disturbed', ''];\r\n\r\nconst InteractiveBackground = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  const containerRef = useRef(null);\r\n  \r\n  // Выбор случайного символа на основе позиции\r\n  const getRandomSymbol = (x, y) => {\r\n    // Используем координаты для создания псевдо-случайного выбора типа символа\r\n    const seed = (x * 31 + y * 17) % 100;\r\n    \r\n    if (seed < 60) {\r\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\r\n    } else if (seed < 85) {\r\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\r\n    } else {\r\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\r\n    }\r\n  };\r\n  \r\n  // Функция для создания сетки символов\r\n  const createGrid = () => {\r\n    if (!containerRef.current) return;\r\n    \r\n    const containerWidth = containerRef.current.offsetWidth;\r\n    const containerHeight = containerRef.current.offsetHeight;\r\n    \r\n    const columns = Math.floor(containerWidth / 40);\r\n    const rows = Math.floor(containerHeight / 40);\r\n    \r\n    setDimensions({ width: containerWidth, height: containerHeight });\r\n    \r\n    const newGrid = [];\r\n    for (let y = 0; y < rows; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < columns; x++) {\r\n        // Генерируем случайный символ на основе позиции\r\n        const char = getRandomSymbol(x, y);\r\n        \r\n        // Для разнообразия делаем символы разного размера\r\n        const size = Math.random() < 0.1 ? `${12 + Math.floor(Math.random() * 8)}px` : '14px';\r\n        \r\n        row.push({\r\n          id: `${x}-${y}`,\r\n          x,\r\n          y,\r\n          char,\r\n          size,\r\n          // Случайное начальное состояние и настроение\r\n          state: Math.random() < 0.03 ? 'highlight' : 'normal',\r\n          mood: Math.random() < 0.01 ? moods[Math.floor(Math.random() * moods.length)] : '',\r\n          moodEmoji: moodEmojis[Math.floor(Math.random() * moodEmojis.length)]\r\n        });\r\n      }\r\n      newGrid.push(row);\r\n    }\r\n    setGrid(newGrid);\r\n  };\r\n  \r\n  // Инициализация сетки\r\n  useEffect(() => {\r\n    createGrid();\r\n    window.addEventListener('resize', createGrid);\r\n    \r\n    // Периодически обновляем случайные символы и их состояния\r\n    const interval = setInterval(() => {\r\n      setGrid(prevGrid => \r\n        prevGrid.map(row => \r\n          row.map(cell => {\r\n            // Небольшая вероятность изменения символа\r\n            const changeChar = Math.random() < 0.02;\r\n            // Ещё меньшая вероятность смены настроения\r\n            const changeMood = Math.random() < 0.005;\r\n            \r\n            return {\r\n              ...cell,\r\n              char: changeChar ? getRandomSymbol(cell.x, cell.y) : cell.char,\r\n              mood: changeMood ? moods[Math.floor(Math.random() * moods.length)] : cell.mood,\r\n              state: Math.random() < 0.01 ? \r\n                (cell.state === 'normal' ? 'highlight' : 'normal') : cell.state\r\n            };\r\n          })\r\n        )\r\n      );\r\n    }, 2000);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', createGrid);\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n  \r\n  // Обработка движения мыши\r\n  useEffect(() => {\r\n    const handleMouseMove = (e) => {\r\n      if (!containerRef.current) return;\r\n      \r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      \r\n      setMousePosition({ x, y });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    return () => window.removeEventListener('mousemove', handleMouseMove);\r\n  }, []);\r\n  \r\n  // Обновление состояний ячеек на основе положения мыши\r\n  useEffect(() => {\r\n    setGrid(prevGrid => \r\n      prevGrid.map(row => \r\n        row.map(cell => {\r\n          const cellX = cell.x * 40 + 20;\r\n          const cellY = cell.y * 40 + 20;\r\n          \r\n          const distance = Math.sqrt(\r\n            Math.pow(cellX - mousePosition.x, 2) + \r\n            Math.pow(cellY - mousePosition.y, 2)\r\n          );\r\n          \r\n          let newState = 'normal';\r\n          let newMood = cell.mood;\r\n          \r\n          if (distance < 80) {\r\n            newState = 'active';\r\n            // При активации ячейки повышаем вероятность появления настроения\r\n            if (Math.random() < 0.3) {\r\n              newMood = moods[Math.floor(Math.random() * (moods.length - 1))]; // Исключаем пустое настроение\r\n            }\r\n          } else if (distance < 150) {\r\n            newState = 'highlight';\r\n          }\r\n          \r\n          return {\r\n            ...cell,\r\n            state: newState,\r\n            mood: newMood\r\n          };\r\n        })\r\n      )\r\n    );\r\n  }, [mousePosition]);\r\n  \r\n  return (\r\n    <BackgroundContainer ref={containerRef}>\r\n      <Grid>\r\n        {grid.flat().map(cell => (\r\n          <Cell \r\n            key={cell.id}\r\n            className={`${cell.state} ${cell.mood}`}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ \r\n              opacity: cell.state === 'active' ? 0.6 : \r\n                      cell.state === 'highlight' ? 0.2 : 0.05 \r\n            }}\r\n            transition={{ duration: 0.3 }}\r\n            $size={cell.size}\r\n          >\r\n            {cell.char}\r\n            {cell.mood && cell.state === 'active' && (\r\n              <MoodIndicator className={cell.mood}>{cell.moodEmoji}</MoodIndicator>\r\n            )}\r\n          </Cell>\r\n        ))}\r\n      </Grid>\r\n    </BackgroundContainer>\r\n  );\r\n};\r\n\r\nexport default InteractiveBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}