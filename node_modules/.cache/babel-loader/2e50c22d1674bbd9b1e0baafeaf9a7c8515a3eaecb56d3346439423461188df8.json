{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\5585\\\\Desktop\\\\\\u0442\\u0435\\u0441\\u04422_\\u0432\\u0435\\u0431\\\\portfolio\\\\src\\\\components\\\\InteractiveBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  user-select: none;\n  pointer-events: none;\n  z-index: 1;\n`;\n_c = BackgroundContainer;\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(30px, 1fr));\n  grid-template-rows: repeat(auto-fill, minmax(30px, 1fr));\n  width: 100%;\n  height: 100%;\n`;\n_c2 = Grid;\nconst Cell = styled(motion.div)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: monospace;\n  font-size: ${props => props.$size || '12px'};\n  color: var(--text-primary);\n  opacity: 0.05;\n  transition: opacity 0.3s ease;\n  position: relative;\n  transform-origin: center;\n  \n  &.highlight {\n    opacity: 0.2;\n  }\n  \n  &.active {\n    opacity: 0.5;\n  }\n`;\n\n// Наборы символов по категориям\n_c3 = Cell;\nconst numericSymbols = '0123456789';\nconst mathSymbols = '+-*/=<>%';\nconst specialSymbols = '#$&*@[]^_{}~';\nconst InteractiveBackground = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const containerRef = useRef(null);\n  const animationFrameId = useRef(null);\n  const lastUpdateTime = useRef(0);\n\n  // Выбор случайного символа на основе позиции - мемоизируем функцию\n  const getRandomSymbol = useCallback((x, y) => {\n    // Используем координаты для создания псевдо-случайного выбора типа символа\n    const seed = (x * 31 + y * 17) % 100;\n    if (seed < 60) {\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\n    } else if (seed < 85) {\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\n    } else {\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\n    }\n  }, []);\n\n  // Функция для создания сетки символов\n  const createGrid = useCallback(() => {\n    if (!containerRef.current) return;\n    const containerWidth = containerRef.current.offsetWidth;\n    const containerHeight = containerRef.current.offsetHeight;\n\n    // Уменьшаем размер ячейки для более плотной сетки\n    const columns = Math.floor(containerWidth / 30);\n    const rows = Math.floor(containerHeight / 30);\n    setDimensions({\n      width: containerWidth,\n      height: containerHeight\n    });\n    const newGrid = [];\n    for (let y = 0; y < rows; y++) {\n      const row = [];\n      for (let x = 0; x < columns; x++) {\n        // Генерируем случайный символ на основе позиции\n        const char = getRandomSymbol(x, y);\n\n        // Для разнообразия делаем символы разного размера\n        const size = Math.random() < 0.1 ? `${10 + Math.floor(Math.random() * 4)}px` : '12px';\n        row.push({\n          id: `${x}-${y}`,\n          x,\n          y,\n          char,\n          size,\n          // Случайное начальное состояние\n          state: Math.random() < 0.03 ? 'highlight' : 'normal'\n        });\n      }\n      newGrid.push(row);\n    }\n    setGrid(newGrid);\n  }, [getRandomSymbol]);\n\n  // Обновляем ячейки в зависимости от позиции мыши при помощи requestAnimationFrame\n  const updateCellsBasedOnMouse = useCallback(() => {\n    if (!containerRef.current) return;\n    const currentTime = Date.now();\n    // Обновляем не чаще, чем раз в 60 мс для снижения нагрузки\n    if (currentTime - lastUpdateTime.current < 60) {\n      animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n      return;\n    }\n    lastUpdateTime.current = currentTime;\n    setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n      const cellX = cell.x * 30 + 15;\n      const cellY = cell.y * 30 + 15;\n      const distance = Math.sqrt(Math.pow(cellX - mousePosition.x, 2) + Math.pow(cellY - mousePosition.y, 2));\n      let newState = 'normal';\n      if (distance < 60) {\n        newState = 'active';\n      } else if (distance < 120) {\n        newState = 'highlight';\n      }\n\n      // Возвращаем новый объект только если состояние изменилось\n      if (cell.state !== newState) {\n        return {\n          ...cell,\n          state: newState\n        };\n      }\n      return cell;\n    })));\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n  }, [mousePosition]);\n\n  // Инициализация сетки\n  useEffect(() => {\n    createGrid();\n    const handleResize = () => {\n      // Используем debounce для обработки события resize\n      clearTimeout(window.resizeTimer);\n      window.resizeTimer = setTimeout(createGrid, 250);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Периодически обновляем случайные символы\n    const interval = setInterval(() => {\n      setGrid(prevGrid => prevGrid.map(row => row.map(cell => {\n        // Небольшая вероятность изменения символа\n        const changeChar = Math.random() < 0.01;\n\n        // Возвращаем новый объект только при реальных изменениях\n        if (changeChar) {\n          return {\n            ...cell,\n            char: getRandomSymbol(cell.x, cell.y)\n          };\n        }\n        return cell;\n      })));\n    }, 3000);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      clearInterval(interval);\n    };\n  }, [createGrid, getRandomSymbol]);\n\n  // Обработка движения мыши\n  useEffect(() => {\n    const handleMouseMove = e => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      setMousePosition({\n        x,\n        y\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Запускаем анимацию обновления ячеек\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [updateCellsBasedOnMouse]);\n\n  // Мемоизируем ячейки сетки для улучшения производительности\n  const renderedGrid = useMemo(() => grid.flat().map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n    className: cell.state,\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: cell.state === 'active' ? 0.5 : cell.state === 'highlight' ? 0.2 : 0.05,\n      scale: cell.state === 'active' ? 1.3 : cell.state === 'highlight' ? 1.1 : 1,\n      x: cell.state === 'active' ? Math.random() * 4 - 2 : 0,\n      y: cell.state === 'active' ? Math.random() * 4 - 2 : 0\n    },\n    transition: {\n      duration: 0.2,\n      type: cell.state === 'active' ? 'spring' : 'tween',\n      stiffness: 200,\n      damping: 10\n    },\n    $size: cell.size,\n    children: cell.char\n  }, cell.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 7\n  }, this)), [grid]);\n  return /*#__PURE__*/_jsxDEV(BackgroundContainer, {\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      children: renderedGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveBackground, \"0pPMZ8qz+YbJ4Q3y/qdlyG44/ak=\");\n_c4 = InteractiveBackground;\nexport default InteractiveBackground;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"BackgroundContainer\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"Cell\");\n$RefreshReg$(_c4, \"InteractiveBackground\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","useCallback","styled","motion","jsxDEV","_jsxDEV","BackgroundContainer","div","_c","Grid","_c2","Cell","props","$size","_c3","numericSymbols","mathSymbols","specialSymbols","InteractiveBackground","_s","grid","setGrid","mousePosition","setMousePosition","x","y","dimensions","setDimensions","width","height","containerRef","animationFrameId","lastUpdateTime","getRandomSymbol","seed","charAt","Math","floor","random","length","createGrid","current","containerWidth","offsetWidth","containerHeight","offsetHeight","columns","rows","newGrid","row","char","size","push","id","state","updateCellsBasedOnMouse","currentTime","Date","now","requestAnimationFrame","prevGrid","map","cell","cellX","cellY","distance","sqrt","pow","newState","handleResize","clearTimeout","window","resizeTimer","setTimeout","addEventListener","interval","setInterval","changeChar","removeEventListener","clearInterval","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","cancelAnimationFrame","renderedGrid","flat","className","initial","opacity","animate","scale","transition","duration","type","stiffness","damping","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c4","$RefreshReg$"],"sources":["C:/Users/5585/Desktop/тест2_веб/portfolio/src/components/InteractiveBackground.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst BackgroundContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  user-select: none;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(30px, 1fr));\r\n  grid-template-rows: repeat(auto-fill, minmax(30px, 1fr));\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cell = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-family: monospace;\r\n  font-size: ${props => props.$size || '12px'};\r\n  color: var(--text-primary);\r\n  opacity: 0.05;\r\n  transition: opacity 0.3s ease;\r\n  position: relative;\r\n  transform-origin: center;\r\n  \r\n  &.highlight {\r\n    opacity: 0.2;\r\n  }\r\n  \r\n  &.active {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\n// Наборы символов по категориям\r\nconst numericSymbols = '0123456789';\r\nconst mathSymbols = '+-*/=<>%';\r\nconst specialSymbols = '#$&*@[]^_{}~';\r\n\r\nconst InteractiveBackground = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  const containerRef = useRef(null);\r\n  const animationFrameId = useRef(null);\r\n  const lastUpdateTime = useRef(0);\r\n  \r\n  // Выбор случайного символа на основе позиции - мемоизируем функцию\r\n  const getRandomSymbol = useCallback((x, y) => {\r\n    // Используем координаты для создания псевдо-случайного выбора типа символа\r\n    const seed = (x * 31 + y * 17) % 100;\r\n    \r\n    if (seed < 60) {\r\n      return numericSymbols.charAt(Math.floor(Math.random() * numericSymbols.length));\r\n    } else if (seed < 85) {\r\n      return mathSymbols.charAt(Math.floor(Math.random() * mathSymbols.length));\r\n    } else {\r\n      return specialSymbols.charAt(Math.floor(Math.random() * specialSymbols.length));\r\n    }\r\n  }, []);\r\n  \r\n  // Функция для создания сетки символов\r\n  const createGrid = useCallback(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    const containerWidth = containerRef.current.offsetWidth;\r\n    const containerHeight = containerRef.current.offsetHeight;\r\n    \r\n    // Уменьшаем размер ячейки для более плотной сетки\r\n    const columns = Math.floor(containerWidth / 30);\r\n    const rows = Math.floor(containerHeight / 30);\r\n    \r\n    setDimensions({ width: containerWidth, height: containerHeight });\r\n    \r\n    const newGrid = [];\r\n    for (let y = 0; y < rows; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < columns; x++) {\r\n        // Генерируем случайный символ на основе позиции\r\n        const char = getRandomSymbol(x, y);\r\n        \r\n        // Для разнообразия делаем символы разного размера\r\n        const size = Math.random() < 0.1 ? `${10 + Math.floor(Math.random() * 4)}px` : '12px';\r\n        \r\n        row.push({\r\n          id: `${x}-${y}`,\r\n          x,\r\n          y,\r\n          char,\r\n          size,\r\n          // Случайное начальное состояние\r\n          state: Math.random() < 0.03 ? 'highlight' : 'normal'\r\n        });\r\n      }\r\n      newGrid.push(row);\r\n    }\r\n    setGrid(newGrid);\r\n  }, [getRandomSymbol]);\r\n  \r\n  // Обновляем ячейки в зависимости от позиции мыши при помощи requestAnimationFrame\r\n  const updateCellsBasedOnMouse = useCallback(() => {\r\n    if (!containerRef.current) return;\r\n    \r\n    const currentTime = Date.now();\r\n    // Обновляем не чаще, чем раз в 60 мс для снижения нагрузки\r\n    if (currentTime - lastUpdateTime.current < 60) {\r\n      animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n      return;\r\n    }\r\n    \r\n    lastUpdateTime.current = currentTime;\r\n    \r\n    setGrid(prevGrid => \r\n      prevGrid.map(row => \r\n        row.map(cell => {\r\n          const cellX = cell.x * 30 + 15;\r\n          const cellY = cell.y * 30 + 15;\r\n          \r\n          const distance = Math.sqrt(\r\n            Math.pow(cellX - mousePosition.x, 2) + \r\n            Math.pow(cellY - mousePosition.y, 2)\r\n          );\r\n          \r\n          let newState = 'normal';\r\n          \r\n          if (distance < 60) {\r\n            newState = 'active';\r\n          } else if (distance < 120) {\r\n            newState = 'highlight';\r\n          }\r\n          \r\n          // Возвращаем новый объект только если состояние изменилось\r\n          if (cell.state !== newState) {\r\n            return {\r\n              ...cell,\r\n              state: newState\r\n            };\r\n          }\r\n          \r\n          return cell;\r\n        })\r\n      )\r\n    );\r\n    \r\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n  }, [mousePosition]);\r\n  \r\n  // Инициализация сетки\r\n  useEffect(() => {\r\n    createGrid();\r\n    \r\n    const handleResize = () => {\r\n      // Используем debounce для обработки события resize\r\n      clearTimeout(window.resizeTimer);\r\n      window.resizeTimer = setTimeout(createGrid, 250);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Периодически обновляем случайные символы\r\n    const interval = setInterval(() => {\r\n      setGrid(prevGrid => \r\n        prevGrid.map(row => \r\n          row.map(cell => {\r\n            // Небольшая вероятность изменения символа\r\n            const changeChar = Math.random() < 0.01;\r\n            \r\n            // Возвращаем новый объект только при реальных изменениях\r\n            if (changeChar) {\r\n              return {\r\n                ...cell,\r\n                char: getRandomSymbol(cell.x, cell.y)\r\n              };\r\n            }\r\n            \r\n            return cell;\r\n          })\r\n        )\r\n      );\r\n    }, 3000);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      clearInterval(interval);\r\n    };\r\n  }, [createGrid, getRandomSymbol]);\r\n  \r\n  // Обработка движения мыши\r\n  useEffect(() => {\r\n    const handleMouseMove = (e) => {\r\n      if (!containerRef.current) return;\r\n      \r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      \r\n      setMousePosition({ x, y });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    \r\n    // Запускаем анимацию обновления ячеек\r\n    animationFrameId.current = requestAnimationFrame(updateCellsBasedOnMouse);\r\n    \r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n    };\r\n  }, [updateCellsBasedOnMouse]);\r\n  \r\n  // Мемоизируем ячейки сетки для улучшения производительности\r\n  const renderedGrid = useMemo(() => (\r\n    grid.flat().map(cell => (\r\n      <Cell \r\n        key={cell.id}\r\n        className={cell.state}\r\n        initial={{ opacity: 0 }}\r\n        animate={{ \r\n          opacity: cell.state === 'active' ? 0.5 : \r\n                  cell.state === 'highlight' ? 0.2 : 0.05,\r\n          scale: cell.state === 'active' ? 1.3 : \r\n                 cell.state === 'highlight' ? 1.1 : 1,\r\n          x: cell.state === 'active' ? Math.random() * 4 - 2 : 0,\r\n          y: cell.state === 'active' ? Math.random() * 4 - 2 : 0\r\n        }}\r\n        transition={{ \r\n          duration: 0.2,\r\n          type: cell.state === 'active' ? 'spring' : 'tween',\r\n          stiffness: 200,\r\n          damping: 10\r\n        }}\r\n        $size={cell.size}\r\n      >\r\n        {cell.char}\r\n      </Cell>\r\n    ))\r\n  ), [grid]);\r\n  \r\n  return (\r\n    <BackgroundContainer ref={containerRef}>\r\n      <Grid>\r\n        {renderedGrid}\r\n      </Grid>\r\n    </BackgroundContainer>\r\n  );\r\n};\r\n\r\nexport default InteractiveBackground; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}